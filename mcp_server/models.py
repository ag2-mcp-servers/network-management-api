# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:31:41+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Cause(Enum):
    CAUSE_UNSPECIFIED = 'CAUSE_UNSPECIFIED'
    UNKNOWN_NETWORK = 'UNKNOWN_NETWORK'
    UNKNOWN_IP = 'UNKNOWN_IP'
    UNKNOWN_PROJECT = 'UNKNOWN_PROJECT'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NO_SOURCE_LOCATION = 'NO_SOURCE_LOCATION'
    INVALID_ARGUMENT = 'INVALID_ARGUMENT'
    NO_EXTERNAL_IP = 'NO_EXTERNAL_IP'
    UNINTENDED_DESTINATION = 'UNINTENDED_DESTINATION'
    TRACE_TOO_LONG = 'TRACE_TOO_LONG'
    INTERNAL_ERROR = 'INTERNAL_ERROR'
    SOURCE_ENDPOINT_NOT_FOUND = 'SOURCE_ENDPOINT_NOT_FOUND'
    MISMATCHED_SOURCE_NETWORK = 'MISMATCHED_SOURCE_NETWORK'
    DESTINATION_ENDPOINT_NOT_FOUND = 'DESTINATION_ENDPOINT_NOT_FOUND'
    MISMATCHED_DESTINATION_NETWORK = 'MISMATCHED_DESTINATION_NETWORK'
    UNSUPPORTED = 'UNSUPPORTED'
    MISMATCHED_IP_VERSION = 'MISMATCHED_IP_VERSION'
    GKE_KONNECTIVITY_PROXY_UNSUPPORTED = 'GKE_KONNECTIVITY_PROXY_UNSUPPORTED'


class AbortInfo(BaseModel):
    cause: Optional[Cause] = Field(
        None, description='Causes that the analysis is aborted.'
    )
    projectsMissingPermission: Optional[List[str]] = Field(
        None,
        description='List of project IDs that the user has specified in the request but does not have permission to access network configs. Analysis is aborted in this case with the PERMISSION_DENIED cause.',
    )
    resourceUri: Optional[str] = Field(
        None, description='URI of the resource that caused the abort.'
    )


class AppEngineVersionEndpoint(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='An [App Engine](https://cloud.google.com/appengine) [service version](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions) name.',
    )


class AppEngineVersionInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of an App Engine version.'
    )
    environment: Optional[str] = Field(
        None, description='App Engine execution environment for a version.'
    )
    runtime: Optional[str] = Field(
        None, description='Runtime of the App Engine version.'
    )
    uri: Optional[str] = Field(None, description='URI of an App Engine version.')


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class CancelOperationRequest(BaseModel):
    pass


class CloudFunctionEndpoint(BaseModel):
    uri: Optional[str] = Field(
        None, description='A [Cloud Function](https://cloud.google.com/functions) name.'
    )


class CloudFunctionInfo(BaseModel):
    displayName: Optional[str] = Field(None, description='Name of a Cloud Function.')
    location: Optional[str] = Field(
        None, description='Location in which the Cloud Function is deployed.'
    )
    uri: Optional[str] = Field(None, description='URI of a Cloud Function.')
    versionId: Optional[str] = Field(
        None,
        description='Latest successfully deployed version id of the Cloud Function.',
    )


class CloudRunRevisionEndpoint(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='A [Cloud Run](https://cloud.google.com/run) [revision](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.revisions/get) URI. The format is: projects/{project}/locations/{location}/revisions/{revision}',
    )


class CloudRunRevisionInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of a Cloud Run revision.'
    )
    location: Optional[str] = Field(
        None, description='Location in which this revision is deployed.'
    )
    serviceName: Optional[str] = Field(
        None, description='ID of Cloud Run Service this revision belongs to.'
    )
    serviceUri: Optional[str] = Field(
        None, description='URI of Cloud Run service this revision belongs to.'
    )
    uri: Optional[str] = Field(None, description='URI of a Cloud Run revision.')


class CloudSQLInstanceInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of a Cloud SQL instance.'
    )
    externalIp: Optional[str] = Field(
        None, description='External IP address of a Cloud SQL instance.'
    )
    internalIp: Optional[str] = Field(
        None, description='Internal IP address of a Cloud SQL instance.'
    )
    networkUri: Optional[str] = Field(
        None,
        description='URI of a Cloud SQL instance network or empty string if the instance does not have one.',
    )
    region: Optional[str] = Field(
        None, description='Region in which the Cloud SQL instance is running.'
    )
    uri: Optional[str] = Field(None, description='URI of a Cloud SQL instance.')


class Target(Enum):
    TARGET_UNSPECIFIED = 'TARGET_UNSPECIFIED'
    INSTANCE = 'INSTANCE'
    INTERNET = 'INTERNET'
    GOOGLE_API = 'GOOGLE_API'
    GKE_MASTER = 'GKE_MASTER'
    CLOUD_SQL_INSTANCE = 'CLOUD_SQL_INSTANCE'
    PSC_PUBLISHED_SERVICE = 'PSC_PUBLISHED_SERVICE'
    PSC_GOOGLE_API = 'PSC_GOOGLE_API'
    PSC_VPC_SC = 'PSC_VPC_SC'
    SERVERLESS_NEG = 'SERVERLESS_NEG'


class DeliverInfo(BaseModel):
    resourceUri: Optional[str] = Field(
        None, description='URI of the resource that the packet is delivered to.'
    )
    target: Optional[Target] = Field(
        None, description='Target type where the packet is delivered to.'
    )


class Cause1(Enum):
    CAUSE_UNSPECIFIED = 'CAUSE_UNSPECIFIED'
    UNKNOWN_EXTERNAL_ADDRESS = 'UNKNOWN_EXTERNAL_ADDRESS'
    FOREIGN_IP_DISALLOWED = 'FOREIGN_IP_DISALLOWED'
    FIREWALL_RULE = 'FIREWALL_RULE'
    NO_ROUTE = 'NO_ROUTE'
    ROUTE_BLACKHOLE = 'ROUTE_BLACKHOLE'
    ROUTE_WRONG_NETWORK = 'ROUTE_WRONG_NETWORK'
    PRIVATE_TRAFFIC_TO_INTERNET = 'PRIVATE_TRAFFIC_TO_INTERNET'
    PRIVATE_GOOGLE_ACCESS_DISALLOWED = 'PRIVATE_GOOGLE_ACCESS_DISALLOWED'
    NO_EXTERNAL_ADDRESS = 'NO_EXTERNAL_ADDRESS'
    UNKNOWN_INTERNAL_ADDRESS = 'UNKNOWN_INTERNAL_ADDRESS'
    FORWARDING_RULE_MISMATCH = 'FORWARDING_RULE_MISMATCH'
    FORWARDING_RULE_REGION_MISMATCH = 'FORWARDING_RULE_REGION_MISMATCH'
    FORWARDING_RULE_NO_INSTANCES = 'FORWARDING_RULE_NO_INSTANCES'
    FIREWALL_BLOCKING_LOAD_BALANCER_BACKEND_HEALTH_CHECK = (
        'FIREWALL_BLOCKING_LOAD_BALANCER_BACKEND_HEALTH_CHECK'
    )
    INSTANCE_NOT_RUNNING = 'INSTANCE_NOT_RUNNING'
    GKE_CLUSTER_NOT_RUNNING = 'GKE_CLUSTER_NOT_RUNNING'
    CLOUD_SQL_INSTANCE_NOT_RUNNING = 'CLOUD_SQL_INSTANCE_NOT_RUNNING'
    TRAFFIC_TYPE_BLOCKED = 'TRAFFIC_TYPE_BLOCKED'
    GKE_MASTER_UNAUTHORIZED_ACCESS = 'GKE_MASTER_UNAUTHORIZED_ACCESS'
    CLOUD_SQL_INSTANCE_UNAUTHORIZED_ACCESS = 'CLOUD_SQL_INSTANCE_UNAUTHORIZED_ACCESS'
    DROPPED_INSIDE_GKE_SERVICE = 'DROPPED_INSIDE_GKE_SERVICE'
    DROPPED_INSIDE_CLOUD_SQL_SERVICE = 'DROPPED_INSIDE_CLOUD_SQL_SERVICE'
    GOOGLE_MANAGED_SERVICE_NO_PEERING = 'GOOGLE_MANAGED_SERVICE_NO_PEERING'
    GKE_PSC_ENDPOINT_MISSING = 'GKE_PSC_ENDPOINT_MISSING'
    CLOUD_SQL_INSTANCE_NO_IP_ADDRESS = 'CLOUD_SQL_INSTANCE_NO_IP_ADDRESS'
    GKE_CONTROL_PLANE_REGION_MISMATCH = 'GKE_CONTROL_PLANE_REGION_MISMATCH'
    PUBLIC_GKE_CONTROL_PLANE_TO_PRIVATE_DESTINATION = (
        'PUBLIC_GKE_CONTROL_PLANE_TO_PRIVATE_DESTINATION'
    )
    GKE_CONTROL_PLANE_NO_ROUTE = 'GKE_CONTROL_PLANE_NO_ROUTE'
    CLOUD_SQL_INSTANCE_NOT_CONFIGURED_FOR_EXTERNAL_TRAFFIC = (
        'CLOUD_SQL_INSTANCE_NOT_CONFIGURED_FOR_EXTERNAL_TRAFFIC'
    )
    PUBLIC_CLOUD_SQL_INSTANCE_TO_PRIVATE_DESTINATION = (
        'PUBLIC_CLOUD_SQL_INSTANCE_TO_PRIVATE_DESTINATION'
    )
    CLOUD_SQL_INSTANCE_NO_ROUTE = 'CLOUD_SQL_INSTANCE_NO_ROUTE'
    CLOUD_FUNCTION_NOT_ACTIVE = 'CLOUD_FUNCTION_NOT_ACTIVE'
    VPC_CONNECTOR_NOT_SET = 'VPC_CONNECTOR_NOT_SET'
    VPC_CONNECTOR_NOT_RUNNING = 'VPC_CONNECTOR_NOT_RUNNING'
    PSC_CONNECTION_NOT_ACCEPTED = 'PSC_CONNECTION_NOT_ACCEPTED'
    CLOUD_RUN_REVISION_NOT_READY = 'CLOUD_RUN_REVISION_NOT_READY'
    DROPPED_INSIDE_PSC_SERVICE_PRODUCER = 'DROPPED_INSIDE_PSC_SERVICE_PRODUCER'


class DropInfo(BaseModel):
    cause: Optional[Cause1] = Field(
        None, description='Cause that the packet is dropped.'
    )
    resourceUri: Optional[str] = Field(
        None, description='URI of the resource that caused the drop.'
    )


class EdgeLocation(BaseModel):
    metropolitanArea: Optional[str] = Field(
        None, description='Name of the metropolitan area.'
    )


class Empty(BaseModel):
    pass


class ForwardingRuleTarget(Enum):
    FORWARDING_RULE_TARGET_UNSPECIFIED = 'FORWARDING_RULE_TARGET_UNSPECIFIED'
    INSTANCE = 'INSTANCE'
    LOAD_BALANCER = 'LOAD_BALANCER'
    VPN_GATEWAY = 'VPN_GATEWAY'
    PSC = 'PSC'


class LoadBalancerType(Enum):
    LOAD_BALANCER_TYPE_UNSPECIFIED = 'LOAD_BALANCER_TYPE_UNSPECIFIED'
    HTTPS_ADVANCED_LOAD_BALANCER = 'HTTPS_ADVANCED_LOAD_BALANCER'
    HTTPS_LOAD_BALANCER = 'HTTPS_LOAD_BALANCER'
    REGIONAL_HTTPS_LOAD_BALANCER = 'REGIONAL_HTTPS_LOAD_BALANCER'
    INTERNAL_HTTPS_LOAD_BALANCER = 'INTERNAL_HTTPS_LOAD_BALANCER'
    SSL_PROXY_LOAD_BALANCER = 'SSL_PROXY_LOAD_BALANCER'
    TCP_PROXY_LOAD_BALANCER = 'TCP_PROXY_LOAD_BALANCER'
    INTERNAL_TCP_PROXY_LOAD_BALANCER = 'INTERNAL_TCP_PROXY_LOAD_BALANCER'
    NETWORK_LOAD_BALANCER = 'NETWORK_LOAD_BALANCER'
    LEGACY_NETWORK_LOAD_BALANCER = 'LEGACY_NETWORK_LOAD_BALANCER'
    TCP_UDP_INTERNAL_LOAD_BALANCER = 'TCP_UDP_INTERNAL_LOAD_BALANCER'


class NetworkType(Enum):
    NETWORK_TYPE_UNSPECIFIED = 'NETWORK_TYPE_UNSPECIFIED'
    GCP_NETWORK = 'GCP_NETWORK'
    NON_GCP_NETWORK = 'NON_GCP_NETWORK'


class Endpoint(BaseModel):
    appEngineVersion: Optional[AppEngineVersionEndpoint] = Field(
        None,
        description='An [App Engine](https://cloud.google.com/appengine) [service version](https://cloud.google.com/appengine/docs/admin-api/reference/rest/v1/apps.services.versions).',
    )
    cloudFunction: Optional[CloudFunctionEndpoint] = Field(
        None, description='A [Cloud Function](https://cloud.google.com/functions).'
    )
    cloudRunRevision: Optional[CloudRunRevisionEndpoint] = Field(
        None,
        description='A [Cloud Run](https://cloud.google.com/run) [revision](https://cloud.google.com/run/docs/reference/rest/v1/namespaces.revisions/get)',
    )
    cloudSqlInstance: Optional[str] = Field(
        None, description='A [Cloud SQL](https://cloud.google.com/sql) instance URI.'
    )
    forwardingRule: Optional[str] = Field(
        None,
        description='Forwarding rule URI. Forwarding rules are frontends for load balancers, PSC endpoints and Protocol Forwarding. Format: projects/{project}/global/forwardingRules/{id} or projects/{project}/regions/{region}/forwardingRules/{id}',
    )
    forwardingRuleTarget: Optional[ForwardingRuleTarget] = Field(
        None,
        description='Output only. Specifies the type of the target of the forwarding rule.',
    )
    gkeMasterCluster: Optional[str] = Field(
        None,
        description='A cluster URI for [Google Kubernetes Engine master](https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture).',
    )
    instance: Optional[str] = Field(None, description='A Compute Engine instance URI.')
    ipAddress: Optional[str] = Field(
        None,
        description="The IP address of the endpoint, which can be an external or internal IP. An IPv6 address is only allowed when the test's destination is a [global load balancer VIP](https://cloud.google.com/load-balancing/docs/load-balancing-overview).",
    )
    loadBalancerId: Optional[str] = Field(
        None,
        description='Output only. ID of the load balancer the forwarding rule points to. Empty for forwarding rules not related to load balancers.',
    )
    loadBalancerType: Optional[LoadBalancerType] = Field(
        None,
        description='Output only. Type of the load balancer the forwarding rule points to.',
    )
    network: Optional[str] = Field(None, description='A Compute Engine network URI.')
    networkType: Optional[NetworkType] = Field(
        None,
        description='Type of the network where the endpoint is located. Applicable only to source endpoint, as destination network type can be inferred from the source.',
    )
    port: Optional[int] = Field(
        None,
        description='The IP protocol port of the endpoint. Only applicable when protocol is TCP or UDP.',
    )
    projectId: Optional[str] = Field(
        None,
        description='Project ID where the endpoint is located. The Project ID can be derived from the URI if you provide a VM instance or network URI. The following are two cases where you must provide the project ID: 1. Only the IP address is specified, and the IP address is within a GCP project. 2. When you are using Shared VPC and the IP address that you provide is from the service project. In this case, the network that the IP address resides in is defined in the host project.',
    )


class EndpointInfo(BaseModel):
    destinationIp: Optional[str] = Field(None, description='Destination IP address.')
    destinationNetworkUri: Optional[str] = Field(
        None, description='URI of the network where this packet is sent to.'
    )
    destinationPort: Optional[int] = Field(
        None, description='Destination port. Only valid when protocol is TCP or UDP.'
    )
    protocol: Optional[str] = Field(
        None,
        description='IP protocol in string format, for example: "TCP", "UDP", "ICMP".',
    )
    sourceAgentUri: Optional[str] = Field(
        None,
        description='URI of the source telemetry agent this packet originates from.',
    )
    sourceIp: Optional[str] = Field(None, description='Source IP address.')
    sourceNetworkUri: Optional[str] = Field(
        None, description='URI of the network where this packet originates from.'
    )
    sourcePort: Optional[int] = Field(
        None, description='Source port. Only valid when protocol is TCP or UDP.'
    )


class Expr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class FirewallRuleType(Enum):
    FIREWALL_RULE_TYPE_UNSPECIFIED = 'FIREWALL_RULE_TYPE_UNSPECIFIED'
    HIERARCHICAL_FIREWALL_POLICY_RULE = 'HIERARCHICAL_FIREWALL_POLICY_RULE'
    VPC_FIREWALL_RULE = 'VPC_FIREWALL_RULE'
    IMPLIED_VPC_FIREWALL_RULE = 'IMPLIED_VPC_FIREWALL_RULE'
    SERVERLESS_VPC_ACCESS_MANAGED_FIREWALL_RULE = (
        'SERVERLESS_VPC_ACCESS_MANAGED_FIREWALL_RULE'
    )
    NETWORK_FIREWALL_POLICY_RULE = 'NETWORK_FIREWALL_POLICY_RULE'


class FirewallInfo(BaseModel):
    action: Optional[str] = Field(None, description='Possible values: ALLOW, DENY')
    direction: Optional[str] = Field(
        None, description='Possible values: INGRESS, EGRESS'
    )
    displayName: Optional[str] = Field(
        None,
        description='The display name of the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.',
    )
    firewallRuleType: Optional[FirewallRuleType] = Field(
        None, description="The firewall rule's type."
    )
    networkUri: Optional[str] = Field(
        None,
        description='The URI of the VPC network that the firewall rule is associated with. This field is not applicable to hierarchical firewall policy rules.',
    )
    policy: Optional[str] = Field(
        None,
        description='The hierarchical firewall policy that this rule is associated with. This field is not applicable to VPC firewall rules.',
    )
    priority: Optional[int] = Field(
        None, description='The priority of the firewall rule.'
    )
    targetServiceAccounts: Optional[List[str]] = Field(
        None, description='The target service accounts specified by the firewall rule.'
    )
    targetTags: Optional[List[str]] = Field(
        None,
        description='The target tags defined by the VPC firewall rule. This field is not applicable to hierarchical firewall policy rules.',
    )
    uri: Optional[str] = Field(
        None,
        description='The URI of the VPC firewall rule. This field is not applicable to implied firewall rules or hierarchical firewall policy rules.',
    )


class Target1(Enum):
    TARGET_UNSPECIFIED = 'TARGET_UNSPECIFIED'
    PEERING_VPC = 'PEERING_VPC'
    VPN_GATEWAY = 'VPN_GATEWAY'
    INTERCONNECT = 'INTERCONNECT'
    GKE_MASTER = 'GKE_MASTER'
    IMPORTED_CUSTOM_ROUTE_NEXT_HOP = 'IMPORTED_CUSTOM_ROUTE_NEXT_HOP'
    CLOUD_SQL_INSTANCE = 'CLOUD_SQL_INSTANCE'
    ANOTHER_PROJECT = 'ANOTHER_PROJECT'


class ForwardInfo(BaseModel):
    resourceUri: Optional[str] = Field(
        None, description='URI of the resource that the packet is forwarded to.'
    )
    target: Optional[Target1] = Field(
        None, description='Target type where this packet is forwarded to.'
    )


class ForwardingRuleInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of a Compute Engine forwarding rule.'
    )
    matchedPortRange: Optional[str] = Field(
        None,
        description='Port range defined in the forwarding rule that matches the test.',
    )
    matchedProtocol: Optional[str] = Field(
        None,
        description='Protocol defined in the forwarding rule that matches the test.',
    )
    networkUri: Optional[str] = Field(
        None, description='Network URI. Only valid for Internal Load Balancer.'
    )
    target: Optional[str] = Field(
        None, description='Target type of the forwarding rule.'
    )
    uri: Optional[str] = Field(
        None, description='URI of a Compute Engine forwarding rule.'
    )
    vip: Optional[str] = Field(None, description='VIP of the forwarding rule.')


class GKEMasterInfo(BaseModel):
    clusterNetworkUri: Optional[str] = Field(
        None, description='URI of a GKE cluster network.'
    )
    clusterUri: Optional[str] = Field(None, description='URI of a GKE cluster.')
    externalIp: Optional[str] = Field(
        None, description='External IP address of a GKE cluster master.'
    )
    internalIp: Optional[str] = Field(
        None, description='Internal IP address of a GKE cluster master.'
    )


class InstanceInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of a Compute Engine instance.'
    )
    externalIp: Optional[str] = Field(
        None, description='External IP address of the network interface.'
    )
    interface: Optional[str] = Field(
        None, description='Name of the network interface of a Compute Engine instance.'
    )
    internalIp: Optional[str] = Field(
        None, description='Internal IP address of the network interface.'
    )
    networkTags: Optional[List[str]] = Field(
        None, description='Network tags configured on the instance.'
    )
    networkUri: Optional[str] = Field(
        None, description='URI of a Compute Engine network.'
    )
    serviceAccount: Optional[str] = Field(
        None, description='Service account authorized for the instance.'
    )
    uri: Optional[str] = Field(None, description='URI of a Compute Engine instance.')


class LatencyPercentile(BaseModel):
    latencyMicros: Optional[str] = Field(
        None,
        description='percent-th percentile of latency observed, in microseconds. Fraction of percent/100 of samples have latency lower or equal to the value of this field.',
    )
    percent: Optional[int] = Field(
        None, description='Percentage of samples this data point applies to.'
    )


class HealthCheckFirewallState(Enum):
    HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED = 'HEALTH_CHECK_FIREWALL_STATE_UNSPECIFIED'
    CONFIGURED = 'CONFIGURED'
    MISCONFIGURED = 'MISCONFIGURED'


class LoadBalancerBackend(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of a Compute Engine instance or network endpoint.'
    )
    healthCheckAllowingFirewallRules: Optional[List[str]] = Field(
        None,
        description='A list of firewall rule URIs allowing probes from health check IP ranges.',
    )
    healthCheckBlockingFirewallRules: Optional[List[str]] = Field(
        None,
        description='A list of firewall rule URIs blocking probes from health check IP ranges.',
    )
    healthCheckFirewallState: Optional[HealthCheckFirewallState] = Field(
        None, description='State of the health check firewall configuration.'
    )
    uri: Optional[str] = Field(
        None, description='URI of a Compute Engine instance or network endpoint.'
    )


class BackendType(Enum):
    BACKEND_TYPE_UNSPECIFIED = 'BACKEND_TYPE_UNSPECIFIED'
    BACKEND_SERVICE = 'BACKEND_SERVICE'
    TARGET_POOL = 'TARGET_POOL'
    TARGET_INSTANCE = 'TARGET_INSTANCE'


class LoadBalancerType1(Enum):
    LOAD_BALANCER_TYPE_UNSPECIFIED = 'LOAD_BALANCER_TYPE_UNSPECIFIED'
    INTERNAL_TCP_UDP = 'INTERNAL_TCP_UDP'
    NETWORK_TCP_UDP = 'NETWORK_TCP_UDP'
    HTTP_PROXY = 'HTTP_PROXY'
    TCP_PROXY = 'TCP_PROXY'
    SSL_PROXY = 'SSL_PROXY'


class LoadBalancerInfo(BaseModel):
    backendType: Optional[BackendType] = Field(
        None, description="Type of load balancer's backend configuration."
    )
    backendUri: Optional[str] = Field(None, description='Backend configuration URI.')
    backends: Optional[List[LoadBalancerBackend]] = Field(
        None, description='Information for the loadbalancer backends.'
    )
    healthCheckUri: Optional[str] = Field(
        None, description='URI of the health check for the load balancer.'
    )
    loadBalancerType: Optional[LoadBalancerType1] = Field(
        None, description='Type of the load balancer.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class NetworkInfo(BaseModel):
    displayName: Optional[str] = Field(
        None, description='Name of a Compute Engine network.'
    )
    matchedIpRange: Optional[str] = Field(
        None, description='The IP range that matches the test.'
    )
    uri: Optional[str] = Field(None, description='URI of a Compute Engine network.')


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(None, description='API version.')
    cancelRequested: Optional[bool] = Field(
        None, description='Specifies if cancellation was requested for the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='The time the operation finished running.'
    )
    statusDetail: Optional[str] = Field(
        None, description='Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Target of the operation - for example projects/project-1/locations/global/connectivityTests/test-1',
    )
    verb: Optional[str] = Field(
        None, description='Name of the verb executed by the operation.'
    )


class AbortCause(Enum):
    PROBING_ABORT_CAUSE_UNSPECIFIED = 'PROBING_ABORT_CAUSE_UNSPECIFIED'
    PERMISSION_DENIED = 'PERMISSION_DENIED'
    NO_SOURCE_LOCATION = 'NO_SOURCE_LOCATION'


class Result(Enum):
    PROBING_RESULT_UNSPECIFIED = 'PROBING_RESULT_UNSPECIFIED'
    REACHABLE = 'REACHABLE'
    UNREACHABLE = 'UNREACHABLE'
    REACHABILITY_INCONSISTENT = 'REACHABILITY_INCONSISTENT'
    UNDETERMINED = 'UNDETERMINED'


class Result1(Enum):
    RESULT_UNSPECIFIED = 'RESULT_UNSPECIFIED'
    REACHABLE = 'REACHABLE'
    UNREACHABLE = 'UNREACHABLE'
    AMBIGUOUS = 'AMBIGUOUS'
    UNDETERMINED = 'UNDETERMINED'


class RerunConnectivityTestRequest(BaseModel):
    pass


class NextHopType(Enum):
    NEXT_HOP_TYPE_UNSPECIFIED = 'NEXT_HOP_TYPE_UNSPECIFIED'
    NEXT_HOP_IP = 'NEXT_HOP_IP'
    NEXT_HOP_INSTANCE = 'NEXT_HOP_INSTANCE'
    NEXT_HOP_NETWORK = 'NEXT_HOP_NETWORK'
    NEXT_HOP_PEERING = 'NEXT_HOP_PEERING'
    NEXT_HOP_INTERCONNECT = 'NEXT_HOP_INTERCONNECT'
    NEXT_HOP_VPN_TUNNEL = 'NEXT_HOP_VPN_TUNNEL'
    NEXT_HOP_VPN_GATEWAY = 'NEXT_HOP_VPN_GATEWAY'
    NEXT_HOP_INTERNET_GATEWAY = 'NEXT_HOP_INTERNET_GATEWAY'
    NEXT_HOP_BLACKHOLE = 'NEXT_HOP_BLACKHOLE'
    NEXT_HOP_ILB = 'NEXT_HOP_ILB'
    NEXT_HOP_ROUTER_APPLIANCE = 'NEXT_HOP_ROUTER_APPLIANCE'


class RouteType(Enum):
    ROUTE_TYPE_UNSPECIFIED = 'ROUTE_TYPE_UNSPECIFIED'
    SUBNET = 'SUBNET'
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'
    PEERING_SUBNET = 'PEERING_SUBNET'
    PEERING_STATIC = 'PEERING_STATIC'
    PEERING_DYNAMIC = 'PEERING_DYNAMIC'
    POLICY_BASED = 'POLICY_BASED'


class RouteInfo(BaseModel):
    destIpRange: Optional[str] = Field(
        None, description='Destination IP range of the route.'
    )
    destPortRanges: Optional[List[str]] = Field(
        None,
        description='Destination port ranges of the route. Policy based routes only.',
    )
    displayName: Optional[str] = Field(
        None, description='Name of a Compute Engine route.'
    )
    instanceTags: Optional[List[str]] = Field(
        None, description='Instance tags of the route.'
    )
    networkUri: Optional[str] = Field(
        None, description='URI of a Compute Engine network.'
    )
    nextHop: Optional[str] = Field(None, description='Next hop of the route.')
    nextHopType: Optional[NextHopType] = Field(None, description='Type of next hop.')
    priority: Optional[int] = Field(None, description='Priority of the route.')
    protocols: Optional[List[str]] = Field(
        None, description='Protocols of the route. Policy based routes only.'
    )
    routeType: Optional[RouteType] = Field(None, description='Type of route.')
    srcIpRange: Optional[str] = Field(
        None,
        description='Source IP address range of the route. Policy based routes only.',
    )
    srcPortRanges: Optional[List[str]] = Field(
        None, description='Source port ranges of the route. Policy based routes only.'
    )
    uri: Optional[str] = Field(
        None,
        description='URI of a Compute Engine route. Dynamic route from cloud router does not have a URI. Advertised route from Google Cloud VPC to on-premises network also does not have a URI.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    START_FROM_INSTANCE = 'START_FROM_INSTANCE'
    START_FROM_INTERNET = 'START_FROM_INTERNET'
    START_FROM_PRIVATE_NETWORK = 'START_FROM_PRIVATE_NETWORK'
    START_FROM_GKE_MASTER = 'START_FROM_GKE_MASTER'
    START_FROM_CLOUD_SQL_INSTANCE = 'START_FROM_CLOUD_SQL_INSTANCE'
    START_FROM_CLOUD_FUNCTION = 'START_FROM_CLOUD_FUNCTION'
    START_FROM_APP_ENGINE_VERSION = 'START_FROM_APP_ENGINE_VERSION'
    START_FROM_CLOUD_RUN_REVISION = 'START_FROM_CLOUD_RUN_REVISION'
    APPLY_INGRESS_FIREWALL_RULE = 'APPLY_INGRESS_FIREWALL_RULE'
    APPLY_EGRESS_FIREWALL_RULE = 'APPLY_EGRESS_FIREWALL_RULE'
    APPLY_ROUTE = 'APPLY_ROUTE'
    APPLY_FORWARDING_RULE = 'APPLY_FORWARDING_RULE'
    SPOOFING_APPROVED = 'SPOOFING_APPROVED'
    ARRIVE_AT_INSTANCE = 'ARRIVE_AT_INSTANCE'
    ARRIVE_AT_INTERNAL_LOAD_BALANCER = 'ARRIVE_AT_INTERNAL_LOAD_BALANCER'
    ARRIVE_AT_EXTERNAL_LOAD_BALANCER = 'ARRIVE_AT_EXTERNAL_LOAD_BALANCER'
    ARRIVE_AT_VPN_GATEWAY = 'ARRIVE_AT_VPN_GATEWAY'
    ARRIVE_AT_VPN_TUNNEL = 'ARRIVE_AT_VPN_TUNNEL'
    ARRIVE_AT_VPC_CONNECTOR = 'ARRIVE_AT_VPC_CONNECTOR'
    NAT = 'NAT'
    PROXY_CONNECTION = 'PROXY_CONNECTION'
    DELIVER = 'DELIVER'
    DROP = 'DROP'
    FORWARD = 'FORWARD'
    ABORT = 'ABORT'
    VIEWER_PERMISSION_MISSING = 'VIEWER_PERMISSION_MISSING'


class TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class VpcConnectorInfo(BaseModel):
    displayName: Optional[str] = Field(None, description='Name of a VPC connector.')
    location: Optional[str] = Field(
        None, description='Location in which the VPC connector is deployed.'
    )
    uri: Optional[str] = Field(None, description='URI of a VPC connector.')


class VpnGatewayInfo(BaseModel):
    displayName: Optional[str] = Field(None, description='Name of a VPN gateway.')
    ipAddress: Optional[str] = Field(None, description='IP address of the VPN gateway.')
    networkUri: Optional[str] = Field(
        None,
        description='URI of a Compute Engine network where the VPN gateway is configured.',
    )
    region: Optional[str] = Field(
        None,
        description='Name of a Google Cloud region where this VPN gateway is configured.',
    )
    uri: Optional[str] = Field(None, description='URI of a VPN gateway.')
    vpnTunnelUri: Optional[str] = Field(
        None,
        description='A VPN tunnel that is associated with this VPN gateway. There may be multiple VPN tunnels configured on a VPN gateway, and only the one relevant to the test is displayed.',
    )


class RoutingType(Enum):
    ROUTING_TYPE_UNSPECIFIED = 'ROUTING_TYPE_UNSPECIFIED'
    ROUTE_BASED = 'ROUTE_BASED'
    POLICY_BASED = 'POLICY_BASED'
    DYNAMIC = 'DYNAMIC'


class VpnTunnelInfo(BaseModel):
    displayName: Optional[str] = Field(None, description='Name of a VPN tunnel.')
    networkUri: Optional[str] = Field(
        None,
        description='URI of a Compute Engine network where the VPN tunnel is configured.',
    )
    region: Optional[str] = Field(
        None,
        description='Name of a Google Cloud region where this VPN tunnel is configured.',
    )
    remoteGateway: Optional[str] = Field(
        None, description='URI of a VPN gateway at remote end of the tunnel.'
    )
    remoteGatewayIp: Optional[str] = Field(
        None, description="Remote VPN gateway's IP address."
    )
    routingType: Optional[RoutingType] = Field(
        None, description='Type of the routing policy.'
    )
    sourceGateway: Optional[str] = Field(
        None, description='URI of the VPN gateway at local end of the tunnel.'
    )
    sourceGatewayIp: Optional[str] = Field(
        None, description="Local VPN gateway's IP address."
    )
    uri: Optional[str] = Field(None, description='URI of a VPN tunnel.')


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class Binding(BaseModel):
    condition: Optional[Expr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class LatencyDistribution(BaseModel):
    latencyPercentiles: Optional[List[LatencyPercentile]] = Field(
        None, description='Representative latency percentiles.'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class Policy(BaseModel):
    auditConfigs: Optional[List[AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class ProbingDetails(BaseModel):
    abortCause: Optional[AbortCause] = Field(
        None, description='The reason probing was aborted.'
    )
    destinationEgressLocation: Optional[EdgeLocation] = Field(
        None,
        description='The EdgeLocation from which a packet destined for/originating from the internet will egress/ingress the Google network. This will only be populated for a connectivity test which has an internet destination/source address. The absence of this field *must not* be used as an indication that the destination/source is part of the Google network.',
    )
    endpointInfo: Optional[EndpointInfo] = Field(
        None,
        description='The source and destination endpoints derived from the test input and used for active probing.',
    )
    error: Optional[Status] = Field(
        None,
        description='Details about an internal failure or the cancellation of active probing.',
    )
    probingLatency: Optional[LatencyDistribution] = Field(
        None,
        description='Latency as measured by active probing in one direction: from the source to the destination endpoint.',
    )
    result: Optional[Result] = Field(
        None, description='The overall result of active probing.'
    )
    sentProbeCount: Optional[int] = Field(None, description='Number of probes sent.')
    successfulProbeCount: Optional[int] = Field(
        None, description='Number of probes that reached the destination.'
    )
    verifyTime: Optional[str] = Field(
        None,
        description='The time that reachability was assessed through active probing.',
    )


class SetIamPolicyRequest(BaseModel):
    policy: Optional[Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class Step(BaseModel):
    abort: Optional[AbortInfo] = Field(
        None, description='Display information of the final state "abort" and reason.'
    )
    appEngineVersion: Optional[AppEngineVersionInfo] = Field(
        None, description='Display information of an App Engine service version.'
    )
    causesDrop: Optional[bool] = Field(
        None, description='This is a step that leads to the final state Drop.'
    )
    cloudFunction: Optional[CloudFunctionInfo] = Field(
        None, description='Display information of a Cloud Function.'
    )
    cloudRunRevision: Optional[CloudRunRevisionInfo] = Field(
        None, description='Display information of a Cloud Run revision.'
    )
    cloudSqlInstance: Optional[CloudSQLInstanceInfo] = Field(
        None, description='Display information of a Cloud SQL instance.'
    )
    deliver: Optional[DeliverInfo] = Field(
        None, description='Display information of the final state "deliver" and reason.'
    )
    description: Optional[str] = Field(
        None,
        description='A description of the step. Usually this is a summary of the state.',
    )
    drop: Optional[DropInfo] = Field(
        None, description='Display information of the final state "drop" and reason.'
    )
    endpoint: Optional[EndpointInfo] = Field(
        None,
        description='Display information of the source and destination under analysis. The endpoint information in an intermediate state may differ with the initial input, as it might be modified by state like NAT, or Connection Proxy.',
    )
    firewall: Optional[FirewallInfo] = Field(
        None, description='Display information of a Compute Engine firewall rule.'
    )
    forward: Optional[ForwardInfo] = Field(
        None, description='Display information of the final state "forward" and reason.'
    )
    forwardingRule: Optional[ForwardingRuleInfo] = Field(
        None, description='Display information of a Compute Engine forwarding rule.'
    )
    gkeMaster: Optional[GKEMasterInfo] = Field(
        None,
        description='Display information of a Google Kubernetes Engine cluster master.',
    )
    instance: Optional[InstanceInfo] = Field(
        None, description='Display information of a Compute Engine instance.'
    )
    loadBalancer: Optional[LoadBalancerInfo] = Field(
        None, description='Display information of the load balancers.'
    )
    network: Optional[NetworkInfo] = Field(
        None, description='Display information of a Google Cloud network.'
    )
    projectId: Optional[str] = Field(
        None,
        description='Project ID that contains the configuration this step is validating.',
    )
    route: Optional[RouteInfo] = Field(
        None, description='Display information of a Compute Engine route.'
    )
    state: Optional[State] = Field(
        None, description='Each step is in one of the pre-defined states.'
    )
    vpcConnector: Optional[VpcConnectorInfo] = Field(
        None, description='Display information of a VPC connector.'
    )
    vpnGateway: Optional[VpnGatewayInfo] = Field(
        None, description='Display information of a Compute Engine VPN gateway.'
    )
    vpnTunnel: Optional[VpnTunnelInfo] = Field(
        None, description='Display information of a Compute Engine VPN tunnel.'
    )


class Trace(BaseModel):
    endpointInfo: Optional[EndpointInfo] = Field(
        None,
        description='Derived from the source and destination endpoints definition specified by user request, and validated by the data plane model. If there are multiple traces starting from different source locations, then the endpoint_info may be different between traces.',
    )
    steps: Optional[List[Step]] = Field(
        None,
        description='A trace of a test contains multiple steps from the initial state to the final state (delivered, dropped, forwarded, or aborted). The steps are ordered by the processing sequence within the simulated network state machine. It is critical to preserve the order of the steps and avoid reordering or sorting them.',
    )


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ReachabilityDetails(BaseModel):
    error: Optional[Status] = Field(
        None,
        description='The details of a failure or a cancellation of reachability analysis.',
    )
    result: Optional[Result1] = Field(
        None, description="The overall result of the test's configuration analysis."
    )
    traces: Optional[List[Trace]] = Field(
        None,
        description='Result may contain a list of traces if a test has multiple possible paths in the network, such as when destination endpoint is a load balancer with multiple backends.',
    )
    verifyTime: Optional[str] = Field(
        None, description='The time of the configuration analysis.'
    )


class ConnectivityTest(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time the test was created.'
    )
    description: Optional[str] = Field(
        None,
        description='The user-supplied description of the Connectivity Test. Maximum of 512 characters.',
    )
    destination: Optional[Endpoint] = Field(
        None,
        description="Required. Destination specification of the Connectivity Test. You can use a combination of destination IP address, Compute Engine VM instance, or VPC network to uniquely identify the destination location. Even if the destination IP address is not unique, the source IP location is unique. Usually, the analysis can infer the destination endpoint from route information. If the destination you specify is a VM instance and the instance has multiple network interfaces, then you must also specify either a destination IP address or VPC network to identify the destination interface. A reachability analysis proceeds even if the destination location is ambiguous. However, the result can include endpoints that you don't intend to test.",
    )
    displayName: Optional[str] = Field(
        None, description='Output only. The display name of a Connectivity Test.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Resource labels to represent user-provided metadata.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique name of the resource using the form: `projects/{project_id}/locations/global/connectivityTests/{test}`',
    )
    probingDetails: Optional[ProbingDetails] = Field(
        None,
        description='Output only. The probing details of this test from the latest run, present for applicable tests only. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.',
    )
    protocol: Optional[str] = Field(
        None,
        description='IP Protocol of the test. When not provided, "TCP" is assumed.',
    )
    reachabilityDetails: Optional[ReachabilityDetails] = Field(
        None,
        description='Output only. The reachability details of this test from the latest run. The details are updated when creating a new test, updating an existing test, or triggering a one-time rerun of an existing test.',
    )
    relatedProjects: Optional[List[str]] = Field(
        None,
        description='Other projects that may be relevant for reachability analysis. This is applicable to scenarios where a test can cross project boundaries.',
    )
    source: Optional[Endpoint] = Field(
        None,
        description="Required. Source specification of the Connectivity Test. You can use a combination of source IP address, virtual machine (VM) instance, or Compute Engine network to uniquely identify the source location. Examples: If the source IP address is an internal IP address within a Google Cloud Virtual Private Cloud (VPC) network, then you must also specify the VPC network. Otherwise, specify the VM instance, which already contains its internal IP address and VPC network information. If the source of the test is within an on-premises network, then you must provide the destination VPC network. If the source endpoint is a Compute Engine VM instance with multiple network interfaces, the instance itself is not sufficient to identify the endpoint. So, you must also specify the source IP address or VPC network. A reachability analysis proceeds even if the source location is ambiguous. However, the test result may include endpoints that you don't intend to test.",
    )
    updateTime: Optional[str] = Field(
        None, description="Output only. The time the test's configuration was updated."
    )


class ListConnectivityTestsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='Page token to fetch the next set of Connectivity Tests.'
    )
    resources: Optional[List[ConnectivityTest]] = Field(
        None, description='List of Connectivity Tests.'
    )
    unreachable: Optional[List[str]] = Field(
        None,
        description='Locations that could not be reached (when querying all locations with `-`).',
    )
